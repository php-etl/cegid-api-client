<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CegidMtsWebRestfulApiAreasUserControllersV1UserDataNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserData';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserData';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsWebRestfulApiAreasUserControllersV1UserData();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Id', $data) && $data['Id'] !== null) {
                $object->setId($data['Id']);
            } elseif (\array_key_exists('Id', $data) && $data['Id'] === null) {
                $object->setId(null);
            }
            if (\array_key_exists('Login', $data) && $data['Login'] !== null) {
                $object->setLogin($data['Login']);
            } elseif (\array_key_exists('Login', $data) && $data['Login'] === null) {
                $object->setLogin(null);
            }
            if (\array_key_exists('UserName', $data) && $data['UserName'] !== null) {
                $object->setUserName($data['UserName']);
            } elseif (\array_key_exists('UserName', $data) && $data['UserName'] === null) {
                $object->setUserName(null);
            }
            if (\array_key_exists('Domain', $data) && $data['Domain'] !== null) {
                $object->setDomain($data['Domain']);
            } elseif (\array_key_exists('Domain', $data) && $data['Domain'] === null) {
                $object->setDomain(null);
            }
            if (\array_key_exists('Language', $data) && $data['Language'] !== null) {
                $object->setLanguage($data['Language']);
            } elseif (\array_key_exists('Language', $data) && $data['Language'] === null) {
                $object->setLanguage(null);
            }
            if (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] !== null) {
                $object->setEmployeeId($data['EmployeeId']);
            } elseif (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] === null) {
                $object->setEmployeeId(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['Id'] = $object->getId();
            }
            if ($object->isInitialized('login') && null !== $object->getLogin()) {
                $data['Login'] = $object->getLogin();
            }
            if ($object->isInitialized('userName') && null !== $object->getUserName()) {
                $data['UserName'] = $object->getUserName();
            }
            if ($object->isInitialized('domain') && null !== $object->getDomain()) {
                $data['Domain'] = $object->getDomain();
            }
            if ($object->isInitialized('language') && null !== $object->getLanguage()) {
                $data['Language'] = $object->getLanguage();
            }
            if ($object->isInitialized('employeeId') && null !== $object->getEmployeeId()) {
                $data['EmployeeId'] = $object->getEmployeeId();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserData' => false];
        }
    }
} else {
    class CegidMtsWebRestfulApiAreasUserControllersV1UserDataNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserData';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserData';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsWebRestfulApiAreasUserControllersV1UserData();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Id', $data) && $data['Id'] !== null) {
                $object->setId($data['Id']);
            } elseif (\array_key_exists('Id', $data) && $data['Id'] === null) {
                $object->setId(null);
            }
            if (\array_key_exists('Login', $data) && $data['Login'] !== null) {
                $object->setLogin($data['Login']);
            } elseif (\array_key_exists('Login', $data) && $data['Login'] === null) {
                $object->setLogin(null);
            }
            if (\array_key_exists('UserName', $data) && $data['UserName'] !== null) {
                $object->setUserName($data['UserName']);
            } elseif (\array_key_exists('UserName', $data) && $data['UserName'] === null) {
                $object->setUserName(null);
            }
            if (\array_key_exists('Domain', $data) && $data['Domain'] !== null) {
                $object->setDomain($data['Domain']);
            } elseif (\array_key_exists('Domain', $data) && $data['Domain'] === null) {
                $object->setDomain(null);
            }
            if (\array_key_exists('Language', $data) && $data['Language'] !== null) {
                $object->setLanguage($data['Language']);
            } elseif (\array_key_exists('Language', $data) && $data['Language'] === null) {
                $object->setLanguage(null);
            }
            if (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] !== null) {
                $object->setEmployeeId($data['EmployeeId']);
            } elseif (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] === null) {
                $object->setEmployeeId(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['Id'] = $object->getId();
            }
            if ($object->isInitialized('login') && null !== $object->getLogin()) {
                $data['Login'] = $object->getLogin();
            }
            if ($object->isInitialized('userName') && null !== $object->getUserName()) {
                $data['UserName'] = $object->getUserName();
            }
            if ($object->isInitialized('domain') && null !== $object->getDomain()) {
                $data['Domain'] = $object->getDomain();
            }
            if ($object->isInitialized('language') && null !== $object->getLanguage()) {
                $data['Language'] = $object->getLanguage();
            }
            if ($object->isInitialized('employeeId') && null !== $object->getEmployeeId()) {
                $data['EmployeeId'] = $object->getEmployeeId();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserData' => false];
        }
    }
}
