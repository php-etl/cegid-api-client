<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class MicrosoftODataEdmIEdmModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\MicrosoftODataEdmIEdmModel();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('SchemaElements', $data) && $data['SchemaElements'] !== null) {
                $values = [];
                foreach ($data['SchemaElements'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmSchemaElement', 'json', $context);
                }
                $object->setSchemaElements($values);
            } elseif (\array_key_exists('SchemaElements', $data) && $data['SchemaElements'] === null) {
                $object->setSchemaElements(null);
            }
            if (\array_key_exists('VocabularyAnnotations', $data) && $data['VocabularyAnnotations'] !== null) {
                $values_1 = [];
                foreach ($data['VocabularyAnnotations'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, 'Cegid\\Api\\Model\\MicrosoftODataEdmAnnotationsIEdmVocabularyAnnotation', 'json', $context);
                }
                $object->setVocabularyAnnotations($values_1);
            } elseif (\array_key_exists('VocabularyAnnotations', $data) && $data['VocabularyAnnotations'] === null) {
                $object->setVocabularyAnnotations(null);
            }
            if (\array_key_exists('ReferencedModels', $data) && $data['ReferencedModels'] !== null) {
                $values_2 = [];
                foreach ($data['ReferencedModels'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel', 'json', $context);
                }
                $object->setReferencedModels($values_2);
            } elseif (\array_key_exists('ReferencedModels', $data) && $data['ReferencedModels'] === null) {
                $object->setReferencedModels(null);
            }
            if (\array_key_exists('DeclaredNamespaces', $data) && $data['DeclaredNamespaces'] !== null) {
                $values_3 = [];
                foreach ($data['DeclaredNamespaces'] as $value_3) {
                    $values_3[] = $value_3;
                }
                $object->setDeclaredNamespaces($values_3);
            } elseif (\array_key_exists('DeclaredNamespaces', $data) && $data['DeclaredNamespaces'] === null) {
                $object->setDeclaredNamespaces(null);
            }
            if (\array_key_exists('DirectValueAnnotationsManager', $data) && $data['DirectValueAnnotationsManager'] !== null) {
                $object->setDirectValueAnnotationsManager($this->denormalizer->denormalize($data['DirectValueAnnotationsManager'], 'Cegid\\Api\\Model\\MicrosoftODataEdmAnnotationsIEdmDirectValueAnnotationsManager', 'json', $context));
            } elseif (\array_key_exists('DirectValueAnnotationsManager', $data) && $data['DirectValueAnnotationsManager'] === null) {
                $object->setDirectValueAnnotationsManager(null);
            }
            if (\array_key_exists('EntityContainer', $data) && $data['EntityContainer'] !== null) {
                $object->setEntityContainer($this->denormalizer->denormalize($data['EntityContainer'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmEntityContainer', 'json', $context));
            } elseif (\array_key_exists('EntityContainer', $data) && $data['EntityContainer'] === null) {
                $object->setEntityContainer(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('directValueAnnotationsManager') && null !== $object->getDirectValueAnnotationsManager()) {
                $data['DirectValueAnnotationsManager'] = $this->normalizer->normalize($object->getDirectValueAnnotationsManager(), 'json', $context);
            }
            if ($object->isInitialized('entityContainer') && null !== $object->getEntityContainer()) {
                $data['EntityContainer'] = $this->normalizer->normalize($object->getEntityContainer(), 'json', $context);
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel' => false];
        }
    }
} else {
    class MicrosoftODataEdmIEdmModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\MicrosoftODataEdmIEdmModel();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('SchemaElements', $data) && $data['SchemaElements'] !== null) {
                $values = [];
                foreach ($data['SchemaElements'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmSchemaElement', 'json', $context);
                }
                $object->setSchemaElements($values);
            } elseif (\array_key_exists('SchemaElements', $data) && $data['SchemaElements'] === null) {
                $object->setSchemaElements(null);
            }
            if (\array_key_exists('VocabularyAnnotations', $data) && $data['VocabularyAnnotations'] !== null) {
                $values_1 = [];
                foreach ($data['VocabularyAnnotations'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, 'Cegid\\Api\\Model\\MicrosoftODataEdmAnnotationsIEdmVocabularyAnnotation', 'json', $context);
                }
                $object->setVocabularyAnnotations($values_1);
            } elseif (\array_key_exists('VocabularyAnnotations', $data) && $data['VocabularyAnnotations'] === null) {
                $object->setVocabularyAnnotations(null);
            }
            if (\array_key_exists('ReferencedModels', $data) && $data['ReferencedModels'] !== null) {
                $values_2 = [];
                foreach ($data['ReferencedModels'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel', 'json', $context);
                }
                $object->setReferencedModels($values_2);
            } elseif (\array_key_exists('ReferencedModels', $data) && $data['ReferencedModels'] === null) {
                $object->setReferencedModels(null);
            }
            if (\array_key_exists('DeclaredNamespaces', $data) && $data['DeclaredNamespaces'] !== null) {
                $values_3 = [];
                foreach ($data['DeclaredNamespaces'] as $value_3) {
                    $values_3[] = $value_3;
                }
                $object->setDeclaredNamespaces($values_3);
            } elseif (\array_key_exists('DeclaredNamespaces', $data) && $data['DeclaredNamespaces'] === null) {
                $object->setDeclaredNamespaces(null);
            }
            if (\array_key_exists('DirectValueAnnotationsManager', $data) && $data['DirectValueAnnotationsManager'] !== null) {
                $object->setDirectValueAnnotationsManager($this->denormalizer->denormalize($data['DirectValueAnnotationsManager'], 'Cegid\\Api\\Model\\MicrosoftODataEdmAnnotationsIEdmDirectValueAnnotationsManager', 'json', $context));
            } elseif (\array_key_exists('DirectValueAnnotationsManager', $data) && $data['DirectValueAnnotationsManager'] === null) {
                $object->setDirectValueAnnotationsManager(null);
            }
            if (\array_key_exists('EntityContainer', $data) && $data['EntityContainer'] !== null) {
                $object->setEntityContainer($this->denormalizer->denormalize($data['EntityContainer'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmEntityContainer', 'json', $context));
            } elseif (\array_key_exists('EntityContainer', $data) && $data['EntityContainer'] === null) {
                $object->setEntityContainer(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('directValueAnnotationsManager') && null !== $object->getDirectValueAnnotationsManager()) {
                $data['DirectValueAnnotationsManager'] = $this->normalizer->normalize($object->getDirectValueAnnotationsManager(), 'json', $context);
            }
            if ($object->isInitialized('entityContainer') && null !== $object->getEntityContainer()) {
                $data['EntityContainer'] = $this->normalizer->normalize($object->getEntityContainer(), 'json', $context);
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel' => false];
        }
    }
}
