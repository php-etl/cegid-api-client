<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CegidMtsWebRestfulApiAreasUserControllersV1UserModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserModel';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserModel';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsWebRestfulApiAreasUserControllersV1UserModel();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Id', $data) && $data['Id'] !== null) {
                $object->setId($data['Id']);
            } elseif (\array_key_exists('Id', $data) && $data['Id'] === null) {
                $object->setId(null);
            }
            if (\array_key_exists('Function', $data) && $data['Function'] !== null) {
                $object->setFunction($data['Function']);
            } elseif (\array_key_exists('Function', $data) && $data['Function'] === null) {
                $object->setFunction(null);
            }
            if (\array_key_exists('IsDisabled', $data) && $data['IsDisabled'] !== null) {
                $object->setIsDisabled($data['IsDisabled']);
            } elseif (\array_key_exists('IsDisabled', $data) && $data['IsDisabled'] === null) {
                $object->setIsDisabled(null);
            }
            if (\array_key_exists('IsAdministrator', $data) && $data['IsAdministrator'] !== null) {
                $object->setIsAdministrator($data['IsAdministrator']);
            } elseif (\array_key_exists('IsAdministrator', $data) && $data['IsAdministrator'] === null) {
                $object->setIsAdministrator(null);
            }
            if (\array_key_exists('IsReviewer', $data) && $data['IsReviewer'] !== null) {
                $object->setIsReviewer($data['IsReviewer']);
            } elseif (\array_key_exists('IsReviewer', $data) && $data['IsReviewer'] === null) {
                $object->setIsReviewer(null);
            }
            if (\array_key_exists('Group', $data) && $data['Group'] !== null) {
                $object->setGroup($data['Group']);
            } elseif (\array_key_exists('Group', $data) && $data['Group'] === null) {
                $object->setGroup(null);
            }
            if (\array_key_exists('DelegateGroups', $data) && $data['DelegateGroups'] !== null) {
                $values = [];
                foreach ($data['DelegateGroups'] as $value) {
                    $values[] = $value;
                }
                $object->setDelegateGroups($values);
            } elseif (\array_key_exists('DelegateGroups', $data) && $data['DelegateGroups'] === null) {
                $object->setDelegateGroups(null);
            }
            if (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] !== null) {
                $object->setEmployeeId($data['EmployeeId']);
            } elseif (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] === null) {
                $object->setEmployeeId(null);
            }
            if (\array_key_exists('ColorPrint', $data) && $data['ColorPrint'] !== null) {
                $object->setColorPrint($data['ColorPrint']);
            } elseif (\array_key_exists('ColorPrint', $data) && $data['ColorPrint'] === null) {
                $object->setColorPrint(null);
            }
            if (\array_key_exists('Email', $data) && $data['Email'] !== null) {
                $object->setEmail($data['Email']);
            } elseif (\array_key_exists('Email', $data) && $data['Email'] === null) {
                $object->setEmail(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['Id'] = $object->getId();
            if ($object->isInitialized('function') && null !== $object->getFunction()) {
                $data['Function'] = $object->getFunction();
            }
            if ($object->isInitialized('isDisabled') && null !== $object->getIsDisabled()) {
                $data['IsDisabled'] = $object->getIsDisabled();
            }
            if ($object->isInitialized('isAdministrator') && null !== $object->getIsAdministrator()) {
                $data['IsAdministrator'] = $object->getIsAdministrator();
            }
            if ($object->isInitialized('isReviewer') && null !== $object->getIsReviewer()) {
                $data['IsReviewer'] = $object->getIsReviewer();
            }
            if ($object->isInitialized('group') && null !== $object->getGroup()) {
                $data['Group'] = $object->getGroup();
            }
            if ($object->isInitialized('delegateGroups') && null !== $object->getDelegateGroups()) {
                $values = [];
                foreach ($object->getDelegateGroups() as $value) {
                    $values[] = $value;
                }
                $data['DelegateGroups'] = $values;
            }
            if ($object->isInitialized('employeeId') && null !== $object->getEmployeeId()) {
                $data['EmployeeId'] = $object->getEmployeeId();
            }
            if ($object->isInitialized('colorPrint') && null !== $object->getColorPrint()) {
                $data['ColorPrint'] = $object->getColorPrint();
            }
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['Email'] = $object->getEmail();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserModel' => false];
        }
    }
} else {
    class CegidMtsWebRestfulApiAreasUserControllersV1UserModelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserModel';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserModel';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsWebRestfulApiAreasUserControllersV1UserModel();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Id', $data) && $data['Id'] !== null) {
                $object->setId($data['Id']);
            } elseif (\array_key_exists('Id', $data) && $data['Id'] === null) {
                $object->setId(null);
            }
            if (\array_key_exists('Function', $data) && $data['Function'] !== null) {
                $object->setFunction($data['Function']);
            } elseif (\array_key_exists('Function', $data) && $data['Function'] === null) {
                $object->setFunction(null);
            }
            if (\array_key_exists('IsDisabled', $data) && $data['IsDisabled'] !== null) {
                $object->setIsDisabled($data['IsDisabled']);
            } elseif (\array_key_exists('IsDisabled', $data) && $data['IsDisabled'] === null) {
                $object->setIsDisabled(null);
            }
            if (\array_key_exists('IsAdministrator', $data) && $data['IsAdministrator'] !== null) {
                $object->setIsAdministrator($data['IsAdministrator']);
            } elseif (\array_key_exists('IsAdministrator', $data) && $data['IsAdministrator'] === null) {
                $object->setIsAdministrator(null);
            }
            if (\array_key_exists('IsReviewer', $data) && $data['IsReviewer'] !== null) {
                $object->setIsReviewer($data['IsReviewer']);
            } elseif (\array_key_exists('IsReviewer', $data) && $data['IsReviewer'] === null) {
                $object->setIsReviewer(null);
            }
            if (\array_key_exists('Group', $data) && $data['Group'] !== null) {
                $object->setGroup($data['Group']);
            } elseif (\array_key_exists('Group', $data) && $data['Group'] === null) {
                $object->setGroup(null);
            }
            if (\array_key_exists('DelegateGroups', $data) && $data['DelegateGroups'] !== null) {
                $values = [];
                foreach ($data['DelegateGroups'] as $value) {
                    $values[] = $value;
                }
                $object->setDelegateGroups($values);
            } elseif (\array_key_exists('DelegateGroups', $data) && $data['DelegateGroups'] === null) {
                $object->setDelegateGroups(null);
            }
            if (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] !== null) {
                $object->setEmployeeId($data['EmployeeId']);
            } elseif (\array_key_exists('EmployeeId', $data) && $data['EmployeeId'] === null) {
                $object->setEmployeeId(null);
            }
            if (\array_key_exists('ColorPrint', $data) && $data['ColorPrint'] !== null) {
                $object->setColorPrint($data['ColorPrint']);
            } elseif (\array_key_exists('ColorPrint', $data) && $data['ColorPrint'] === null) {
                $object->setColorPrint(null);
            }
            if (\array_key_exists('Email', $data) && $data['Email'] !== null) {
                $object->setEmail($data['Email']);
            } elseif (\array_key_exists('Email', $data) && $data['Email'] === null) {
                $object->setEmail(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['Id'] = $object->getId();
            if ($object->isInitialized('function') && null !== $object->getFunction()) {
                $data['Function'] = $object->getFunction();
            }
            if ($object->isInitialized('isDisabled') && null !== $object->getIsDisabled()) {
                $data['IsDisabled'] = $object->getIsDisabled();
            }
            if ($object->isInitialized('isAdministrator') && null !== $object->getIsAdministrator()) {
                $data['IsAdministrator'] = $object->getIsAdministrator();
            }
            if ($object->isInitialized('isReviewer') && null !== $object->getIsReviewer()) {
                $data['IsReviewer'] = $object->getIsReviewer();
            }
            if ($object->isInitialized('group') && null !== $object->getGroup()) {
                $data['Group'] = $object->getGroup();
            }
            if ($object->isInitialized('delegateGroups') && null !== $object->getDelegateGroups()) {
                $values = [];
                foreach ($object->getDelegateGroups() as $value) {
                    $values[] = $value;
                }
                $data['DelegateGroups'] = $values;
            }
            if ($object->isInitialized('employeeId') && null !== $object->getEmployeeId()) {
                $data['EmployeeId'] = $object->getEmployeeId();
            }
            if ($object->isInitialized('colorPrint') && null !== $object->getColorPrint()) {
                $data['ColorPrint'] = $object->getColorPrint();
            }
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['Email'] = $object->getEmail();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsWebRestfulApiAreasUserControllersV1UserModel' => false];
        }
    }
}
