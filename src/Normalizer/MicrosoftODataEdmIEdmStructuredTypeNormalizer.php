<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class MicrosoftODataEdmIEdmStructuredTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\MicrosoftODataEdmIEdmStructuredType();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('IsAbstract', $data) && $data['IsAbstract'] !== null) {
                $object->setIsAbstract($data['IsAbstract']);
            } elseif (\array_key_exists('IsAbstract', $data) && $data['IsAbstract'] === null) {
                $object->setIsAbstract(null);
            }
            if (\array_key_exists('IsOpen', $data) && $data['IsOpen'] !== null) {
                $object->setIsOpen($data['IsOpen']);
            } elseif (\array_key_exists('IsOpen', $data) && $data['IsOpen'] === null) {
                $object->setIsOpen(null);
            }
            if (\array_key_exists('BaseType', $data) && $data['BaseType'] !== null) {
                $object->setBaseType($this->denormalizer->denormalize($data['BaseType'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType', 'json', $context));
            } elseif (\array_key_exists('BaseType', $data) && $data['BaseType'] === null) {
                $object->setBaseType(null);
            }
            if (\array_key_exists('DeclaredProperties', $data) && $data['DeclaredProperties'] !== null) {
                $values = [];
                foreach ($data['DeclaredProperties'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmProperty', 'json', $context);
                }
                $object->setDeclaredProperties($values);
            } elseif (\array_key_exists('DeclaredProperties', $data) && $data['DeclaredProperties'] === null) {
                $object->setDeclaredProperties(null);
            }
            if (\array_key_exists('TypeKind', $data) && $data['TypeKind'] !== null) {
                $object->setTypeKind($data['TypeKind']);
            } elseif (\array_key_exists('TypeKind', $data) && $data['TypeKind'] === null) {
                $object->setTypeKind(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('baseType') && null !== $object->getBaseType()) {
                $data['BaseType'] = $this->normalizer->normalize($object->getBaseType(), 'json', $context);
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType' => false];
        }
    }
} else {
    class MicrosoftODataEdmIEdmStructuredTypeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\MicrosoftODataEdmIEdmStructuredType();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('IsAbstract', $data) && $data['IsAbstract'] !== null) {
                $object->setIsAbstract($data['IsAbstract']);
            } elseif (\array_key_exists('IsAbstract', $data) && $data['IsAbstract'] === null) {
                $object->setIsAbstract(null);
            }
            if (\array_key_exists('IsOpen', $data) && $data['IsOpen'] !== null) {
                $object->setIsOpen($data['IsOpen']);
            } elseif (\array_key_exists('IsOpen', $data) && $data['IsOpen'] === null) {
                $object->setIsOpen(null);
            }
            if (\array_key_exists('BaseType', $data) && $data['BaseType'] !== null) {
                $object->setBaseType($this->denormalizer->denormalize($data['BaseType'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType', 'json', $context));
            } elseif (\array_key_exists('BaseType', $data) && $data['BaseType'] === null) {
                $object->setBaseType(null);
            }
            if (\array_key_exists('DeclaredProperties', $data) && $data['DeclaredProperties'] !== null) {
                $values = [];
                foreach ($data['DeclaredProperties'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmProperty', 'json', $context);
                }
                $object->setDeclaredProperties($values);
            } elseif (\array_key_exists('DeclaredProperties', $data) && $data['DeclaredProperties'] === null) {
                $object->setDeclaredProperties(null);
            }
            if (\array_key_exists('TypeKind', $data) && $data['TypeKind'] !== null) {
                $object->setTypeKind($data['TypeKind']);
            } elseif (\array_key_exists('TypeKind', $data) && $data['TypeKind'] === null) {
                $object->setTypeKind(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('baseType') && null !== $object->getBaseType()) {
                $data['BaseType'] = $this->normalizer->normalize($object->getBaseType(), 'json', $context);
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\MicrosoftODataEdmIEdmStructuredType' => false];
        }
    }
}
