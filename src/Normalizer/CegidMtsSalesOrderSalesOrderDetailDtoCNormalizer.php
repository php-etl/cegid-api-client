<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CegidMtsSalesOrderSalesOrderDetailDtoCNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsSalesOrderSalesOrderDetailDtoC';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsSalesOrderSalesOrderDetailDtoC';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsSalesOrderSalesOrderDetailDtoC();
            if (\array_key_exists('OrderedQuantity', $data) && \is_int($data['OrderedQuantity'])) {
                $data['OrderedQuantity'] = (float) $data['OrderedQuantity'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('ProductId', $data) && $data['ProductId'] !== null) {
                $object->setProductId($data['ProductId']);
            } elseif (\array_key_exists('ProductId', $data) && $data['ProductId'] === null) {
                $object->setProductId(null);
            }
            if (\array_key_exists('OrderedQuantity', $data) && $data['OrderedQuantity'] !== null) {
                $object->setOrderedQuantity($data['OrderedQuantity']);
            } elseif (\array_key_exists('OrderedQuantity', $data) && $data['OrderedQuantity'] === null) {
                $object->setOrderedQuantity(null);
            }
            if (\array_key_exists('DeliveryDate', $data) && $data['DeliveryDate'] !== null) {
                $object->setDeliveryDate(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['DeliveryDate']));
            } elseif (\array_key_exists('DeliveryDate', $data) && $data['DeliveryDate'] === null) {
                $object->setDeliveryDate(null);
            }
            if (\array_key_exists('TermsOfSpecialPrice', $data) && $data['TermsOfSpecialPrice'] !== null) {
                $object->setTermsOfSpecialPrice($data['TermsOfSpecialPrice']);
            } elseif (\array_key_exists('TermsOfSpecialPrice', $data) && $data['TermsOfSpecialPrice'] === null) {
                $object->setTermsOfSpecialPrice(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['ProductId'] = $object->getProductId();
            $data['OrderedQuantity'] = $object->getOrderedQuantity();
            if ($object->isInitialized('deliveryDate') && null !== $object->getDeliveryDate()) {
                $data['DeliveryDate'] = $object->getDeliveryDate()->format('Y-m-d\\TH:i:sP');
            }
            if ($object->isInitialized('termsOfSpecialPrice') && null !== $object->getTermsOfSpecialPrice()) {
                $data['TermsOfSpecialPrice'] = $object->getTermsOfSpecialPrice();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsSalesOrderSalesOrderDetailDtoC' => false];
        }
    }
} else {
    class CegidMtsSalesOrderSalesOrderDetailDtoCNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsSalesOrderSalesOrderDetailDtoC';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsSalesOrderSalesOrderDetailDtoC';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsSalesOrderSalesOrderDetailDtoC();
            if (\array_key_exists('OrderedQuantity', $data) && \is_int($data['OrderedQuantity'])) {
                $data['OrderedQuantity'] = (float) $data['OrderedQuantity'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('ProductId', $data) && $data['ProductId'] !== null) {
                $object->setProductId($data['ProductId']);
            } elseif (\array_key_exists('ProductId', $data) && $data['ProductId'] === null) {
                $object->setProductId(null);
            }
            if (\array_key_exists('OrderedQuantity', $data) && $data['OrderedQuantity'] !== null) {
                $object->setOrderedQuantity($data['OrderedQuantity']);
            } elseif (\array_key_exists('OrderedQuantity', $data) && $data['OrderedQuantity'] === null) {
                $object->setOrderedQuantity(null);
            }
            if (\array_key_exists('DeliveryDate', $data) && $data['DeliveryDate'] !== null) {
                $object->setDeliveryDate(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['DeliveryDate']));
            } elseif (\array_key_exists('DeliveryDate', $data) && $data['DeliveryDate'] === null) {
                $object->setDeliveryDate(null);
            }
            if (\array_key_exists('TermsOfSpecialPrice', $data) && $data['TermsOfSpecialPrice'] !== null) {
                $object->setTermsOfSpecialPrice($data['TermsOfSpecialPrice']);
            } elseif (\array_key_exists('TermsOfSpecialPrice', $data) && $data['TermsOfSpecialPrice'] === null) {
                $object->setTermsOfSpecialPrice(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['ProductId'] = $object->getProductId();
            $data['OrderedQuantity'] = $object->getOrderedQuantity();
            if ($object->isInitialized('deliveryDate') && null !== $object->getDeliveryDate()) {
                $data['DeliveryDate'] = $object->getDeliveryDate()->format('Y-m-d\\TH:i:sP');
            }
            if ($object->isInitialized('termsOfSpecialPrice') && null !== $object->getTermsOfSpecialPrice()) {
                $data['TermsOfSpecialPrice'] = $object->getTermsOfSpecialPrice();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsSalesOrderSalesOrderDetailDtoC' => false];
        }
    }
}
