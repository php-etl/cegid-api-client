<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class SystemWebODataODataQueryContextNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\SystemWebODataODataQueryContext';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\SystemWebODataODataQueryContext';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\SystemWebODataODataQueryContext();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Model', $data) && $data['Model'] !== null) {
                $object->setModel($this->denormalizer->denormalize($data['Model'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel', 'json', $context));
            } elseif (\array_key_exists('Model', $data) && $data['Model'] === null) {
                $object->setModel(null);
            }
            if (\array_key_exists('ElementType', $data) && $data['ElementType'] !== null) {
                $object->setElementType($this->denormalizer->denormalize($data['ElementType'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmType', 'json', $context));
            } elseif (\array_key_exists('ElementType', $data) && $data['ElementType'] === null) {
                $object->setElementType(null);
            }
            if (\array_key_exists('NavigationSource', $data) && $data['NavigationSource'] !== null) {
                $object->setNavigationSource($this->denormalizer->denormalize($data['NavigationSource'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmNavigationSource', 'json', $context));
            } elseif (\array_key_exists('NavigationSource', $data) && $data['NavigationSource'] === null) {
                $object->setNavigationSource(null);
            }
            if (\array_key_exists('ElementClrType', $data) && $data['ElementClrType'] !== null) {
                $object->setElementClrType($data['ElementClrType']);
            } elseif (\array_key_exists('ElementClrType', $data) && $data['ElementClrType'] === null) {
                $object->setElementClrType(null);
            }
            if (\array_key_exists('Path', $data) && $data['Path'] !== null) {
                $object->setPath($this->denormalizer->denormalize($data['Path'], 'Cegid\\Api\\Model\\SystemWebODataRoutingODataPath', 'json', $context));
            } elseif (\array_key_exists('Path', $data) && $data['Path'] === null) {
                $object->setPath(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('model') && null !== $object->getModel()) {
                $data['Model'] = $this->normalizer->normalize($object->getModel(), 'json', $context);
            }
            if ($object->isInitialized('elementType') && null !== $object->getElementType()) {
                $data['ElementType'] = $this->normalizer->normalize($object->getElementType(), 'json', $context);
            }
            if ($object->isInitialized('navigationSource') && null !== $object->getNavigationSource()) {
                $data['NavigationSource'] = $this->normalizer->normalize($object->getNavigationSource(), 'json', $context);
            }
            if ($object->isInitialized('path') && null !== $object->getPath()) {
                $data['Path'] = $this->normalizer->normalize($object->getPath(), 'json', $context);
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\SystemWebODataODataQueryContext' => false];
        }
    }
} else {
    class SystemWebODataODataQueryContextNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\SystemWebODataODataQueryContext';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\SystemWebODataODataQueryContext';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\SystemWebODataODataQueryContext();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Model', $data) && $data['Model'] !== null) {
                $object->setModel($this->denormalizer->denormalize($data['Model'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmModel', 'json', $context));
            } elseif (\array_key_exists('Model', $data) && $data['Model'] === null) {
                $object->setModel(null);
            }
            if (\array_key_exists('ElementType', $data) && $data['ElementType'] !== null) {
                $object->setElementType($this->denormalizer->denormalize($data['ElementType'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmType', 'json', $context));
            } elseif (\array_key_exists('ElementType', $data) && $data['ElementType'] === null) {
                $object->setElementType(null);
            }
            if (\array_key_exists('NavigationSource', $data) && $data['NavigationSource'] !== null) {
                $object->setNavigationSource($this->denormalizer->denormalize($data['NavigationSource'], 'Cegid\\Api\\Model\\MicrosoftODataEdmIEdmNavigationSource', 'json', $context));
            } elseif (\array_key_exists('NavigationSource', $data) && $data['NavigationSource'] === null) {
                $object->setNavigationSource(null);
            }
            if (\array_key_exists('ElementClrType', $data) && $data['ElementClrType'] !== null) {
                $object->setElementClrType($data['ElementClrType']);
            } elseif (\array_key_exists('ElementClrType', $data) && $data['ElementClrType'] === null) {
                $object->setElementClrType(null);
            }
            if (\array_key_exists('Path', $data) && $data['Path'] !== null) {
                $object->setPath($this->denormalizer->denormalize($data['Path'], 'Cegid\\Api\\Model\\SystemWebODataRoutingODataPath', 'json', $context));
            } elseif (\array_key_exists('Path', $data) && $data['Path'] === null) {
                $object->setPath(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('model') && null !== $object->getModel()) {
                $data['Model'] = $this->normalizer->normalize($object->getModel(), 'json', $context);
            }
            if ($object->isInitialized('elementType') && null !== $object->getElementType()) {
                $data['ElementType'] = $this->normalizer->normalize($object->getElementType(), 'json', $context);
            }
            if ($object->isInitialized('navigationSource') && null !== $object->getNavigationSource()) {
                $data['NavigationSource'] = $this->normalizer->normalize($object->getNavigationSource(), 'json', $context);
            }
            if ($object->isInitialized('path') && null !== $object->getPath()) {
                $data['Path'] = $this->normalizer->normalize($object->getPath(), 'json', $context);
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\SystemWebODataODataQueryContext' => false];
        }
    }
}
