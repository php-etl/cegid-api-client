<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDtoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto();
            if (\array_key_exists('Count', $data) && \is_int($data['Count'])) {
                $data['Count'] = (float) $data['Count'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Day', $data) && $data['Day'] !== null) {
                $object->setDay(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['Day']));
            } elseif (\array_key_exists('Day', $data) && $data['Day'] === null) {
                $object->setDay(null);
            }
            if (\array_key_exists('DayType', $data) && $data['DayType'] !== null) {
                $object->setDayType($data['DayType']);
            } elseif (\array_key_exists('DayType', $data) && $data['DayType'] === null) {
                $object->setDayType(null);
            }
            if (\array_key_exists('Partial', $data) && $data['Partial'] !== null) {
                $object->setPartial($data['Partial']);
            } elseif (\array_key_exists('Partial', $data) && $data['Partial'] === null) {
                $object->setPartial(null);
            }
            if (\array_key_exists('Authorization', $data) && $data['Authorization'] !== null) {
                $object->setAuthorization($data['Authorization']);
            } elseif (\array_key_exists('Authorization', $data) && $data['Authorization'] === null) {
                $object->setAuthorization(null);
            }
            if (\array_key_exists('Count', $data) && $data['Count'] !== null) {
                $object->setCount($data['Count']);
            } elseif (\array_key_exists('Count', $data) && $data['Count'] === null) {
                $object->setCount(null);
            }
            if (\array_key_exists('State', $data) && $data['State'] !== null) {
                $object->setState($data['State']);
            } elseif (\array_key_exists('State', $data) && $data['State'] === null) {
                $object->setState(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('day') && null !== $object->getDay()) {
                $data['Day'] = $object->getDay()->format('Y-m-d\\TH:i:sP');
            }
            if ($object->isInitialized('dayType') && null !== $object->getDayType()) {
                $data['DayType'] = $object->getDayType();
            }
            if ($object->isInitialized('partial') && null !== $object->getPartial()) {
                $data['Partial'] = $object->getPartial();
            }
            if ($object->isInitialized('authorization') && null !== $object->getAuthorization()) {
                $data['Authorization'] = $object->getAuthorization();
            }
            if ($object->isInitialized('count') && null !== $object->getCount()) {
                $data['Count'] = $object->getCount();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['State'] = $object->getState();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto' => false];
        }
    }
} else {
    class CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDtoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto();
            if (\array_key_exists('Count', $data) && \is_int($data['Count'])) {
                $data['Count'] = (float) $data['Count'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Day', $data) && $data['Day'] !== null) {
                $object->setDay(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['Day']));
            } elseif (\array_key_exists('Day', $data) && $data['Day'] === null) {
                $object->setDay(null);
            }
            if (\array_key_exists('DayType', $data) && $data['DayType'] !== null) {
                $object->setDayType($data['DayType']);
            } elseif (\array_key_exists('DayType', $data) && $data['DayType'] === null) {
                $object->setDayType(null);
            }
            if (\array_key_exists('Partial', $data) && $data['Partial'] !== null) {
                $object->setPartial($data['Partial']);
            } elseif (\array_key_exists('Partial', $data) && $data['Partial'] === null) {
                $object->setPartial(null);
            }
            if (\array_key_exists('Authorization', $data) && $data['Authorization'] !== null) {
                $object->setAuthorization($data['Authorization']);
            } elseif (\array_key_exists('Authorization', $data) && $data['Authorization'] === null) {
                $object->setAuthorization(null);
            }
            if (\array_key_exists('Count', $data) && $data['Count'] !== null) {
                $object->setCount($data['Count']);
            } elseif (\array_key_exists('Count', $data) && $data['Count'] === null) {
                $object->setCount(null);
            }
            if (\array_key_exists('State', $data) && $data['State'] !== null) {
                $object->setState($data['State']);
            } elseif (\array_key_exists('State', $data) && $data['State'] === null) {
                $object->setState(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('day') && null !== $object->getDay()) {
                $data['Day'] = $object->getDay()->format('Y-m-d\\TH:i:sP');
            }
            if ($object->isInitialized('dayType') && null !== $object->getDayType()) {
                $data['DayType'] = $object->getDayType();
            }
            if ($object->isInitialized('partial') && null !== $object->getPartial()) {
                $data['Partial'] = $object->getPartial();
            }
            if ($object->isInitialized('authorization') && null !== $object->getAuthorization()) {
                $data['Authorization'] = $object->getAuthorization();
            }
            if ($object->isInitialized('count') && null !== $object->getCount()) {
                $data['Count'] = $object->getCount();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['State'] = $object->getState();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsActivityActivityActivityReaderDtoPeriodInformationsDto' => false];
        }
    }
}
