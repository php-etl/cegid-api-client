<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CegidMtsActivityReplicationWeekWorkParametersNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsActivityReplicationWeekWorkParameters';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsActivityReplicationWeekWorkParameters';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsActivityReplicationWeekWorkParameters();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('resource', $data) && $data['resource'] !== null) {
                $object->setResource($data['resource']);
            } elseif (\array_key_exists('resource', $data) && $data['resource'] === null) {
                $object->setResource(null);
            }
            if (\array_key_exists('projectCodeList', $data) && $data['projectCodeList'] !== null) {
                $values = [];
                foreach ($data['projectCodeList'] as $value) {
                    $values[] = $value;
                }
                $object->setProjectCodeList($values);
            } elseif (\array_key_exists('projectCodeList', $data) && $data['projectCodeList'] === null) {
                $object->setProjectCodeList(null);
            }
            if (\array_key_exists('timeUnit', $data) && $data['timeUnit'] !== null) {
                $object->setTimeUnit($data['timeUnit']);
            } elseif (\array_key_exists('timeUnit', $data) && $data['timeUnit'] === null) {
                $object->setTimeUnit(null);
            }
            if (\array_key_exists('dayOfWeekList', $data) && $data['dayOfWeekList'] !== null) {
                $values_1 = [];
                foreach ($data['dayOfWeekList'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setDayOfWeekList($values_1);
            } elseif (\array_key_exists('dayOfWeekList', $data) && $data['dayOfWeekList'] === null) {
                $object->setDayOfWeekList(null);
            }
            if (\array_key_exists('firstDateActivity', $data) && $data['firstDateActivity'] !== null) {
                $object->setFirstDateActivity(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['firstDateActivity']));
            } elseif (\array_key_exists('firstDateActivity', $data) && $data['firstDateActivity'] === null) {
                $object->setFirstDateActivity(null);
            }
            if (\array_key_exists('lastDateActivity', $data) && $data['lastDateActivity'] !== null) {
                $object->setLastDateActivity(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['lastDateActivity']));
            } elseif (\array_key_exists('lastDateActivity', $data) && $data['lastDateActivity'] === null) {
                $object->setLastDateActivity(null);
            }
            if (\array_key_exists('daysOfAbsencesList', $data) && $data['daysOfAbsencesList'] !== null) {
                $values_2 = [];
                foreach ($data['daysOfAbsencesList'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, 'Cegid\\Api\\Model\\CegidMtsActivityAbsenceAbsenceDay', 'json', $context);
                }
                $object->setDaysOfAbsencesList($values_2);
            } elseif (\array_key_exists('daysOfAbsencesList', $data) && $data['daysOfAbsencesList'] === null) {
                $object->setDaysOfAbsencesList(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['resource'] = $object->getResource();
            $values = [];
            foreach ($object->getProjectCodeList() as $value) {
                $values[] = $value;
            }
            $data['projectCodeList'] = $values;
            $data['timeUnit'] = $object->getTimeUnit();
            $values_1 = [];
            foreach ($object->getDayOfWeekList() as $value_1) {
                $values_1[] = $value_1;
            }
            $data['dayOfWeekList'] = $values_1;
            $data['firstDateActivity'] = $object->getFirstDateActivity()->format('Y-m-d\\TH:i:sP');
            $data['lastDateActivity'] = $object->getLastDateActivity()->format('Y-m-d\\TH:i:sP');
            $values_2 = [];
            foreach ($object->getDaysOfAbsencesList() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data['daysOfAbsencesList'] = $values_2;

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsActivityReplicationWeekWorkParameters' => false];
        }
    }
} else {
    class CegidMtsActivityReplicationWeekWorkParametersNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsActivityReplicationWeekWorkParameters';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsActivityReplicationWeekWorkParameters';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsActivityReplicationWeekWorkParameters();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('resource', $data) && $data['resource'] !== null) {
                $object->setResource($data['resource']);
            } elseif (\array_key_exists('resource', $data) && $data['resource'] === null) {
                $object->setResource(null);
            }
            if (\array_key_exists('projectCodeList', $data) && $data['projectCodeList'] !== null) {
                $values = [];
                foreach ($data['projectCodeList'] as $value) {
                    $values[] = $value;
                }
                $object->setProjectCodeList($values);
            } elseif (\array_key_exists('projectCodeList', $data) && $data['projectCodeList'] === null) {
                $object->setProjectCodeList(null);
            }
            if (\array_key_exists('timeUnit', $data) && $data['timeUnit'] !== null) {
                $object->setTimeUnit($data['timeUnit']);
            } elseif (\array_key_exists('timeUnit', $data) && $data['timeUnit'] === null) {
                $object->setTimeUnit(null);
            }
            if (\array_key_exists('dayOfWeekList', $data) && $data['dayOfWeekList'] !== null) {
                $values_1 = [];
                foreach ($data['dayOfWeekList'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setDayOfWeekList($values_1);
            } elseif (\array_key_exists('dayOfWeekList', $data) && $data['dayOfWeekList'] === null) {
                $object->setDayOfWeekList(null);
            }
            if (\array_key_exists('firstDateActivity', $data) && $data['firstDateActivity'] !== null) {
                $object->setFirstDateActivity(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['firstDateActivity']));
            } elseif (\array_key_exists('firstDateActivity', $data) && $data['firstDateActivity'] === null) {
                $object->setFirstDateActivity(null);
            }
            if (\array_key_exists('lastDateActivity', $data) && $data['lastDateActivity'] !== null) {
                $object->setLastDateActivity(\DateTime::createFromFormat('Y-m-d\\TH:i:sP', $data['lastDateActivity']));
            } elseif (\array_key_exists('lastDateActivity', $data) && $data['lastDateActivity'] === null) {
                $object->setLastDateActivity(null);
            }
            if (\array_key_exists('daysOfAbsencesList', $data) && $data['daysOfAbsencesList'] !== null) {
                $values_2 = [];
                foreach ($data['daysOfAbsencesList'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, 'Cegid\\Api\\Model\\CegidMtsActivityAbsenceAbsenceDay', 'json', $context);
                }
                $object->setDaysOfAbsencesList($values_2);
            } elseif (\array_key_exists('daysOfAbsencesList', $data) && $data['daysOfAbsencesList'] === null) {
                $object->setDaysOfAbsencesList(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['resource'] = $object->getResource();
            $values = [];
            foreach ($object->getProjectCodeList() as $value) {
                $values[] = $value;
            }
            $data['projectCodeList'] = $values;
            $data['timeUnit'] = $object->getTimeUnit();
            $values_1 = [];
            foreach ($object->getDayOfWeekList() as $value_1) {
                $values_1[] = $value_1;
            }
            $data['dayOfWeekList'] = $values_1;
            $data['firstDateActivity'] = $object->getFirstDateActivity()->format('Y-m-d\\TH:i:sP');
            $data['lastDateActivity'] = $object->getLastDateActivity()->format('Y-m-d\\TH:i:sP');
            $values_2 = [];
            foreach ($object->getDaysOfAbsencesList() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data['daysOfAbsencesList'] = $values_2;

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsActivityReplicationWeekWorkParameters' => false];
        }
    }
}
