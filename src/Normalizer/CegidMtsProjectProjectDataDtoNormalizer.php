<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CegidMtsProjectProjectDataDtoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsProjectProjectDataDto';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsProjectProjectDataDto';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsProjectProjectDataDto();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Origin', $data) && $data['Origin'] !== null) {
                $object->setOrigin($data['Origin']);
            } elseif (\array_key_exists('Origin', $data) && $data['Origin'] === null) {
                $object->setOrigin(null);
            }
            if (\array_key_exists('Project', $data) && $data['Project'] !== null) {
                $object->setProject($data['Project']);
            } elseif (\array_key_exists('Project', $data) && $data['Project'] === null) {
                $object->setProject(null);
            }
            if (\array_key_exists('ProjectDescription', $data) && $data['ProjectDescription'] !== null) {
                $object->setProjectDescription($data['ProjectDescription']);
            } elseif (\array_key_exists('ProjectDescription', $data) && $data['ProjectDescription'] === null) {
                $object->setProjectDescription(null);
            }
            if (\array_key_exists('FormattedProjectLabel', $data) && $data['FormattedProjectLabel'] !== null) {
                $object->setFormattedProjectLabel($data['FormattedProjectLabel']);
            } elseif (\array_key_exists('FormattedProjectLabel', $data) && $data['FormattedProjectLabel'] === null) {
                $object->setFormattedProjectLabel(null);
            }
            if (\array_key_exists('ThirdParty', $data) && $data['ThirdParty'] !== null) {
                $object->setThirdParty($data['ThirdParty']);
            } elseif (\array_key_exists('ThirdParty', $data) && $data['ThirdParty'] === null) {
                $object->setThirdParty(null);
            }
            if (\array_key_exists('ThirdPartyLabel', $data) && $data['ThirdPartyLabel'] !== null) {
                $object->setThirdPartyLabel($data['ThirdPartyLabel']);
            } elseif (\array_key_exists('ThirdPartyLabel', $data) && $data['ThirdPartyLabel'] === null) {
                $object->setThirdPartyLabel(null);
            }
            if (\array_key_exists('ProjectType', $data) && $data['ProjectType'] !== null) {
                $object->setProjectType($data['ProjectType']);
            } elseif (\array_key_exists('ProjectType', $data) && $data['ProjectType'] === null) {
                $object->setProjectType(null);
            }
            if (\array_key_exists('Gap', $data) && $data['Gap'] !== null) {
                $object->setGap($data['Gap']);
            } elseif (\array_key_exists('Gap', $data) && $data['Gap'] === null) {
                $object->setGap(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('origin') && null !== $object->getOrigin()) {
                $data['Origin'] = $object->getOrigin();
            }
            if ($object->isInitialized('project') && null !== $object->getProject()) {
                $data['Project'] = $object->getProject();
            }
            if ($object->isInitialized('projectDescription') && null !== $object->getProjectDescription()) {
                $data['ProjectDescription'] = $object->getProjectDescription();
            }
            if ($object->isInitialized('formattedProjectLabel') && null !== $object->getFormattedProjectLabel()) {
                $data['FormattedProjectLabel'] = $object->getFormattedProjectLabel();
            }
            if ($object->isInitialized('thirdParty') && null !== $object->getThirdParty()) {
                $data['ThirdParty'] = $object->getThirdParty();
            }
            if ($object->isInitialized('thirdPartyLabel') && null !== $object->getThirdPartyLabel()) {
                $data['ThirdPartyLabel'] = $object->getThirdPartyLabel();
            }
            if ($object->isInitialized('projectType') && null !== $object->getProjectType()) {
                $data['ProjectType'] = $object->getProjectType();
            }
            if ($object->isInitialized('gap') && null !== $object->getGap()) {
                $data['Gap'] = $object->getGap();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsProjectProjectDataDto' => false];
        }
    }
} else {
    class CegidMtsProjectProjectDataDtoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsProjectProjectDataDto';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsProjectProjectDataDto';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsProjectProjectDataDto();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('Origin', $data) && $data['Origin'] !== null) {
                $object->setOrigin($data['Origin']);
            } elseif (\array_key_exists('Origin', $data) && $data['Origin'] === null) {
                $object->setOrigin(null);
            }
            if (\array_key_exists('Project', $data) && $data['Project'] !== null) {
                $object->setProject($data['Project']);
            } elseif (\array_key_exists('Project', $data) && $data['Project'] === null) {
                $object->setProject(null);
            }
            if (\array_key_exists('ProjectDescription', $data) && $data['ProjectDescription'] !== null) {
                $object->setProjectDescription($data['ProjectDescription']);
            } elseif (\array_key_exists('ProjectDescription', $data) && $data['ProjectDescription'] === null) {
                $object->setProjectDescription(null);
            }
            if (\array_key_exists('FormattedProjectLabel', $data) && $data['FormattedProjectLabel'] !== null) {
                $object->setFormattedProjectLabel($data['FormattedProjectLabel']);
            } elseif (\array_key_exists('FormattedProjectLabel', $data) && $data['FormattedProjectLabel'] === null) {
                $object->setFormattedProjectLabel(null);
            }
            if (\array_key_exists('ThirdParty', $data) && $data['ThirdParty'] !== null) {
                $object->setThirdParty($data['ThirdParty']);
            } elseif (\array_key_exists('ThirdParty', $data) && $data['ThirdParty'] === null) {
                $object->setThirdParty(null);
            }
            if (\array_key_exists('ThirdPartyLabel', $data) && $data['ThirdPartyLabel'] !== null) {
                $object->setThirdPartyLabel($data['ThirdPartyLabel']);
            } elseif (\array_key_exists('ThirdPartyLabel', $data) && $data['ThirdPartyLabel'] === null) {
                $object->setThirdPartyLabel(null);
            }
            if (\array_key_exists('ProjectType', $data) && $data['ProjectType'] !== null) {
                $object->setProjectType($data['ProjectType']);
            } elseif (\array_key_exists('ProjectType', $data) && $data['ProjectType'] === null) {
                $object->setProjectType(null);
            }
            if (\array_key_exists('Gap', $data) && $data['Gap'] !== null) {
                $object->setGap($data['Gap']);
            } elseif (\array_key_exists('Gap', $data) && $data['Gap'] === null) {
                $object->setGap(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('origin') && null !== $object->getOrigin()) {
                $data['Origin'] = $object->getOrigin();
            }
            if ($object->isInitialized('project') && null !== $object->getProject()) {
                $data['Project'] = $object->getProject();
            }
            if ($object->isInitialized('projectDescription') && null !== $object->getProjectDescription()) {
                $data['ProjectDescription'] = $object->getProjectDescription();
            }
            if ($object->isInitialized('formattedProjectLabel') && null !== $object->getFormattedProjectLabel()) {
                $data['FormattedProjectLabel'] = $object->getFormattedProjectLabel();
            }
            if ($object->isInitialized('thirdParty') && null !== $object->getThirdParty()) {
                $data['ThirdParty'] = $object->getThirdParty();
            }
            if ($object->isInitialized('thirdPartyLabel') && null !== $object->getThirdPartyLabel()) {
                $data['ThirdPartyLabel'] = $object->getThirdPartyLabel();
            }
            if ($object->isInitialized('projectType') && null !== $object->getProjectType()) {
                $data['ProjectType'] = $object->getProjectType();
            }
            if ($object->isInitialized('gap') && null !== $object->getGap()) {
                $data['Gap'] = $object->getGap();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsProjectProjectDataDto' => false];
        }
    }
}
