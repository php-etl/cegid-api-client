<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Normalizer;

use Cegid\Api\Runtime\Normalizer\CheckArray;
use Cegid\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CegidMtsTechnicalBasesModelsSmartServiceAsyncResultNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('InvokeId', $data) && $data['InvokeId'] !== null) {
                $object->setInvokeId($data['InvokeId']);
            } elseif (\array_key_exists('InvokeId', $data) && $data['InvokeId'] === null) {
                $object->setInvokeId(null);
            }
            if (\array_key_exists('StartTicks', $data) && $data['StartTicks'] !== null) {
                $object->setStartTicks($data['StartTicks']);
            } elseif (\array_key_exists('StartTicks', $data) && $data['StartTicks'] === null) {
                $object->setStartTicks(null);
            }
            if (\array_key_exists('WokerTimeout', $data) && $data['WokerTimeout'] !== null) {
                $object->setWokerTimeout($data['WokerTimeout']);
            } elseif (\array_key_exists('WokerTimeout', $data) && $data['WokerTimeout'] === null) {
                $object->setWokerTimeout(null);
            }
            if (\array_key_exists('WokerAsyncTimeout', $data) && $data['WokerAsyncTimeout'] !== null) {
                $object->setWokerAsyncTimeout($data['WokerAsyncTimeout']);
            } elseif (\array_key_exists('WokerAsyncTimeout', $data) && $data['WokerAsyncTimeout'] === null) {
                $object->setWokerAsyncTimeout(null);
            }
            if (\array_key_exists('WorkerAvailabilityChecked', $data) && $data['WorkerAvailabilityChecked'] !== null) {
                $object->setWorkerAvailabilityChecked($data['WorkerAvailabilityChecked']);
            } elseif (\array_key_exists('WorkerAvailabilityChecked', $data) && $data['WorkerAvailabilityChecked'] === null) {
                $object->setWorkerAvailabilityChecked(null);
            }
            if (\array_key_exists('Result', $data) && $data['Result'] !== null) {
                $object->setResult($this->denormalizer->denormalize($data['Result'], 'Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceResult', 'json', $context));
            } elseif (\array_key_exists('Result', $data) && $data['Result'] === null) {
                $object->setResult(null);
            }
            if (\array_key_exists('HasResult', $data) && $data['HasResult'] !== null) {
                $object->setHasResult($data['HasResult']);
            } elseif (\array_key_exists('HasResult', $data) && $data['HasResult'] === null) {
                $object->setHasResult(null);
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('invokeId') && null !== $object->getInvokeId()) {
                $data['InvokeId'] = $object->getInvokeId();
            }
            if ($object->isInitialized('startTicks') && null !== $object->getStartTicks()) {
                $data['StartTicks'] = $object->getStartTicks();
            }
            if ($object->isInitialized('wokerTimeout') && null !== $object->getWokerTimeout()) {
                $data['WokerTimeout'] = $object->getWokerTimeout();
            }
            if ($object->isInitialized('wokerAsyncTimeout') && null !== $object->getWokerAsyncTimeout()) {
                $data['WokerAsyncTimeout'] = $object->getWokerAsyncTimeout();
            }
            if ($object->isInitialized('workerAvailabilityChecked') && null !== $object->getWorkerAvailabilityChecked()) {
                $data['WorkerAvailabilityChecked'] = $object->getWorkerAvailabilityChecked();
            }
            if ($object->isInitialized('result') && null !== $object->getResult()) {
                $data['Result'] = $this->normalizer->normalize($object->getResult(), 'json', $context);
            }
            if ($object->isInitialized('hasResult') && null !== $object->getHasResult()) {
                $data['HasResult'] = $object->getHasResult();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult' => false];
        }
    }
} else {
    class CegidMtsTechnicalBasesModelsSmartServiceAsyncResultNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Cegid\Api\Model\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('InvokeId', $data) && $data['InvokeId'] !== null) {
                $object->setInvokeId($data['InvokeId']);
            } elseif (\array_key_exists('InvokeId', $data) && $data['InvokeId'] === null) {
                $object->setInvokeId(null);
            }
            if (\array_key_exists('StartTicks', $data) && $data['StartTicks'] !== null) {
                $object->setStartTicks($data['StartTicks']);
            } elseif (\array_key_exists('StartTicks', $data) && $data['StartTicks'] === null) {
                $object->setStartTicks(null);
            }
            if (\array_key_exists('WokerTimeout', $data) && $data['WokerTimeout'] !== null) {
                $object->setWokerTimeout($data['WokerTimeout']);
            } elseif (\array_key_exists('WokerTimeout', $data) && $data['WokerTimeout'] === null) {
                $object->setWokerTimeout(null);
            }
            if (\array_key_exists('WokerAsyncTimeout', $data) && $data['WokerAsyncTimeout'] !== null) {
                $object->setWokerAsyncTimeout($data['WokerAsyncTimeout']);
            } elseif (\array_key_exists('WokerAsyncTimeout', $data) && $data['WokerAsyncTimeout'] === null) {
                $object->setWokerAsyncTimeout(null);
            }
            if (\array_key_exists('WorkerAvailabilityChecked', $data) && $data['WorkerAvailabilityChecked'] !== null) {
                $object->setWorkerAvailabilityChecked($data['WorkerAvailabilityChecked']);
            } elseif (\array_key_exists('WorkerAvailabilityChecked', $data) && $data['WorkerAvailabilityChecked'] === null) {
                $object->setWorkerAvailabilityChecked(null);
            }
            if (\array_key_exists('Result', $data) && $data['Result'] !== null) {
                $object->setResult($this->denormalizer->denormalize($data['Result'], 'Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceResult', 'json', $context));
            } elseif (\array_key_exists('Result', $data) && $data['Result'] === null) {
                $object->setResult(null);
            }
            if (\array_key_exists('HasResult', $data) && $data['HasResult'] !== null) {
                $object->setHasResult($data['HasResult']);
            } elseif (\array_key_exists('HasResult', $data) && $data['HasResult'] === null) {
                $object->setHasResult(null);
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('invokeId') && null !== $object->getInvokeId()) {
                $data['InvokeId'] = $object->getInvokeId();
            }
            if ($object->isInitialized('startTicks') && null !== $object->getStartTicks()) {
                $data['StartTicks'] = $object->getStartTicks();
            }
            if ($object->isInitialized('wokerTimeout') && null !== $object->getWokerTimeout()) {
                $data['WokerTimeout'] = $object->getWokerTimeout();
            }
            if ($object->isInitialized('wokerAsyncTimeout') && null !== $object->getWokerAsyncTimeout()) {
                $data['WokerAsyncTimeout'] = $object->getWokerAsyncTimeout();
            }
            if ($object->isInitialized('workerAvailabilityChecked') && null !== $object->getWorkerAvailabilityChecked()) {
                $data['WorkerAvailabilityChecked'] = $object->getWorkerAvailabilityChecked();
            }
            if ($object->isInitialized('result') && null !== $object->getResult()) {
                $data['Result'] = $this->normalizer->normalize($object->getResult(), 'json', $context);
            }
            if ($object->isInitialized('hasResult') && null !== $object->getHasResult()) {
                $data['HasResult'] = $object->getHasResult();
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Cegid\\Api\\Model\\CegidMtsTechnicalBasesModelsSmartServiceAsyncResult' => false];
        }
    }
}
