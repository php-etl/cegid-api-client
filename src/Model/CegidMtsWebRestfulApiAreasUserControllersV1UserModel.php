<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Model;

class CegidMtsWebRestfulApiAreasUserControllersV1UserModel
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Trigramme de l'utilisateur (code utilisateur). Permet d'identifier l'utilisateur.
     *
     * @var string|null
     */
    protected $id;
    /**
     * Fonction occupée par l'utilisateur dans la société.
     *
     * @var string|null
     */
    protected $function;
    /**
     * Désactive l'accès à l'application (ERP).
     *
     * @var bool|null
     */
    protected $isDisabled;
    /**
     * Activer les droits d'administrateur pour l'utilisateur : définition des accès du groupe, remise à zéro des connexions, remise à zéro de l'activité, accès à certaines fonctionnalité (API RH), Etc..
     *
     * @var bool|null
     */
    protected $isAdministrator;
    /**
     * Activer les droits de contrôleur / réviseur pour l'utilisateur. Permet de libérer les fonctions de révision de la comptabilité / Paie / MTS / GA.
     *
     * @var bool|null
     */
    protected $isReviewer;
    /**
     * Code d'un groupe utilisateur. Le groupe d'utilisateur associé va définir ses niveaux d'accès dans les différents modules des applications (ERP).
     *
     * @var string|null
     */
    protected $group;
    /**
     * En complément du groupe, le ou les groupes d'utilisateurs délégués. Permet de compléter les droits donnés par le groupe utilisateurs, et de le faire hériter des droits d'autres d'un ou plusieurs autres groupes d’utilisateurs. L’avantage de cette fonctionnalité est de permettre le cumul de plusieurs droits, et d’offrir de multiples combinaisons, sans avoir à créer de nouveaux groupes.
     *
     * @var list<string>|null
     */
    protected $delegateGroups;
    /**
     * Matricule du collaborateur correspondant (salarié de la société / Intervenant extérieur) lorsque vous utilisez le portail Self-Service RH.
     *
     * @var string|null
     */
    protected $employeeId;
    /**
     * Affichage par défaut des éditions en couleur. Conditionne la case "Impression couleur" accessible à partir de l'onglet "Mise en page" d'une édition.
     *
     * @var bool|null
     */
    protected $colorPrint;
    /**
     * Adresse mail du collaborateur.
     *
     * @var string|null
     */
    protected $email;

    /**
     * Trigramme de l'utilisateur (code utilisateur). Permet d'identifier l'utilisateur.
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Trigramme de l'utilisateur (code utilisateur). Permet d'identifier l'utilisateur.
     */
    public function setId(?string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * Fonction occupée par l'utilisateur dans la société.
     */
    public function getFunction(): ?string
    {
        return $this->function;
    }

    /**
     * Fonction occupée par l'utilisateur dans la société.
     */
    public function setFunction(?string $function): self
    {
        $this->initialized['function'] = true;
        $this->function = $function;

        return $this;
    }

    /**
     * Désactive l'accès à l'application (ERP).
     */
    public function getIsDisabled(): ?bool
    {
        return $this->isDisabled;
    }

    /**
     * Désactive l'accès à l'application (ERP).
     */
    public function setIsDisabled(?bool $isDisabled): self
    {
        $this->initialized['isDisabled'] = true;
        $this->isDisabled = $isDisabled;

        return $this;
    }

    /**
     * Activer les droits d'administrateur pour l'utilisateur : définition des accès du groupe, remise à zéro des connexions, remise à zéro de l'activité, accès à certaines fonctionnalité (API RH), Etc..
     */
    public function getIsAdministrator(): ?bool
    {
        return $this->isAdministrator;
    }

    /**
     * Activer les droits d'administrateur pour l'utilisateur : définition des accès du groupe, remise à zéro des connexions, remise à zéro de l'activité, accès à certaines fonctionnalité (API RH), Etc..
     */
    public function setIsAdministrator(?bool $isAdministrator): self
    {
        $this->initialized['isAdministrator'] = true;
        $this->isAdministrator = $isAdministrator;

        return $this;
    }

    /**
     * Activer les droits de contrôleur / réviseur pour l'utilisateur. Permet de libérer les fonctions de révision de la comptabilité / Paie / MTS / GA.
     */
    public function getIsReviewer(): ?bool
    {
        return $this->isReviewer;
    }

    /**
     * Activer les droits de contrôleur / réviseur pour l'utilisateur. Permet de libérer les fonctions de révision de la comptabilité / Paie / MTS / GA.
     */
    public function setIsReviewer(?bool $isReviewer): self
    {
        $this->initialized['isReviewer'] = true;
        $this->isReviewer = $isReviewer;

        return $this;
    }

    /**
     * Code d'un groupe utilisateur. Le groupe d'utilisateur associé va définir ses niveaux d'accès dans les différents modules des applications (ERP).
     */
    public function getGroup(): ?string
    {
        return $this->group;
    }

    /**
     * Code d'un groupe utilisateur. Le groupe d'utilisateur associé va définir ses niveaux d'accès dans les différents modules des applications (ERP).
     */
    public function setGroup(?string $group): self
    {
        $this->initialized['group'] = true;
        $this->group = $group;

        return $this;
    }

    /**
     * En complément du groupe, le ou les groupes d'utilisateurs délégués. Permet de compléter les droits donnés par le groupe utilisateurs, et de le faire hériter des droits d'autres d'un ou plusieurs autres groupes d’utilisateurs. L’avantage de cette fonctionnalité est de permettre le cumul de plusieurs droits, et d’offrir de multiples combinaisons, sans avoir à créer de nouveaux groupes.
     *
     * @return list<string>|null
     */
    public function getDelegateGroups(): ?array
    {
        return $this->delegateGroups;
    }

    /**
     * En complément du groupe, le ou les groupes d'utilisateurs délégués. Permet de compléter les droits donnés par le groupe utilisateurs, et de le faire hériter des droits d'autres d'un ou plusieurs autres groupes d’utilisateurs. L’avantage de cette fonctionnalité est de permettre le cumul de plusieurs droits, et d’offrir de multiples combinaisons, sans avoir à créer de nouveaux groupes.
     *
     * @param list<string>|null $delegateGroups
     */
    public function setDelegateGroups(?array $delegateGroups): self
    {
        $this->initialized['delegateGroups'] = true;
        $this->delegateGroups = $delegateGroups;

        return $this;
    }

    /**
     * Matricule du collaborateur correspondant (salarié de la société / Intervenant extérieur) lorsque vous utilisez le portail Self-Service RH.
     */
    public function getEmployeeId(): ?string
    {
        return $this->employeeId;
    }

    /**
     * Matricule du collaborateur correspondant (salarié de la société / Intervenant extérieur) lorsque vous utilisez le portail Self-Service RH.
     */
    public function setEmployeeId(?string $employeeId): self
    {
        $this->initialized['employeeId'] = true;
        $this->employeeId = $employeeId;

        return $this;
    }

    /**
     * Affichage par défaut des éditions en couleur. Conditionne la case "Impression couleur" accessible à partir de l'onglet "Mise en page" d'une édition.
     */
    public function getColorPrint(): ?bool
    {
        return $this->colorPrint;
    }

    /**
     * Affichage par défaut des éditions en couleur. Conditionne la case "Impression couleur" accessible à partir de l'onglet "Mise en page" d'une édition.
     */
    public function setColorPrint(?bool $colorPrint): self
    {
        $this->initialized['colorPrint'] = true;
        $this->colorPrint = $colorPrint;

        return $this;
    }

    /**
     * Adresse mail du collaborateur.
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Adresse mail du collaborateur.
     */
    public function setEmail(?string $email): self
    {
        $this->initialized['email'] = true;
        $this->email = $email;

        return $this;
    }
}
