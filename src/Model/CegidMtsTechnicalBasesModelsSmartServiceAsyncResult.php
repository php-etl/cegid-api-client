<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Cegid\Api\Model;

class CegidMtsTechnicalBasesModelsSmartServiceAsyncResult
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Id. retourné par la méthode BeginExecute et à fournir sans modification à la méthode EndExecute() (ne pas modifier).
     *
     * @var string|null
     */
    protected $invokeId;
    /**
     * Point de démarrage du service pour gestion des timeout (sert à la méthode EndExecute() : ne pas modifier).
     *
     * @var int|null
     */
    protected $startTicks;
    /**
     * Timeout de prise en compte de la requête par le Worker (sert à la méthode EndExecute() : ne pas modifier).
     *
     * @var int|null
     */
    protected $wokerTimeout;
    /**
     * Timeout de traitement de l'opération (sert à la méthode EndExecute() : ne pas modifier).
     *
     * @var int|null
     */
    protected $wokerAsyncTimeout;
    /**
     * Le EndExecute() a-t-il déjà contrôlé le timeout de prise en compte de la requête par le worker ? (sert à la méthode EndExecute() : ne pas modifier).
     *
     * @var bool|null
     */
    protected $workerAvailabilityChecked;
    /**
     * Résultat du SmartService.
     *
     * @var CegidMtsTechnicalBasesModelsSmartServiceResult|null
     */
    protected $result;
    /**
     * L'invocatiion du SmartService a retourné un résultat (sert à la méthode EndExecute() : ne pas modifier).
     *
     * @var bool|null
     */
    protected $hasResult;

    /**
     * Id. retourné par la méthode BeginExecute et à fournir sans modification à la méthode EndExecute() (ne pas modifier).
     */
    public function getInvokeId(): ?string
    {
        return $this->invokeId;
    }

    /**
     * Id. retourné par la méthode BeginExecute et à fournir sans modification à la méthode EndExecute() (ne pas modifier).
     */
    public function setInvokeId(?string $invokeId): self
    {
        $this->initialized['invokeId'] = true;
        $this->invokeId = $invokeId;

        return $this;
    }

    /**
     * Point de démarrage du service pour gestion des timeout (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function getStartTicks(): ?int
    {
        return $this->startTicks;
    }

    /**
     * Point de démarrage du service pour gestion des timeout (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function setStartTicks(?int $startTicks): self
    {
        $this->initialized['startTicks'] = true;
        $this->startTicks = $startTicks;

        return $this;
    }

    /**
     * Timeout de prise en compte de la requête par le Worker (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function getWokerTimeout(): ?int
    {
        return $this->wokerTimeout;
    }

    /**
     * Timeout de prise en compte de la requête par le Worker (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function setWokerTimeout(?int $wokerTimeout): self
    {
        $this->initialized['wokerTimeout'] = true;
        $this->wokerTimeout = $wokerTimeout;

        return $this;
    }

    /**
     * Timeout de traitement de l'opération (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function getWokerAsyncTimeout(): ?int
    {
        return $this->wokerAsyncTimeout;
    }

    /**
     * Timeout de traitement de l'opération (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function setWokerAsyncTimeout(?int $wokerAsyncTimeout): self
    {
        $this->initialized['wokerAsyncTimeout'] = true;
        $this->wokerAsyncTimeout = $wokerAsyncTimeout;

        return $this;
    }

    /**
     * Le EndExecute() a-t-il déjà contrôlé le timeout de prise en compte de la requête par le worker ? (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function getWorkerAvailabilityChecked(): ?bool
    {
        return $this->workerAvailabilityChecked;
    }

    /**
     * Le EndExecute() a-t-il déjà contrôlé le timeout de prise en compte de la requête par le worker ? (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function setWorkerAvailabilityChecked(?bool $workerAvailabilityChecked): self
    {
        $this->initialized['workerAvailabilityChecked'] = true;
        $this->workerAvailabilityChecked = $workerAvailabilityChecked;

        return $this;
    }

    /**
     * Résultat du SmartService.
     */
    public function getResult(): ?CegidMtsTechnicalBasesModelsSmartServiceResult
    {
        return $this->result;
    }

    /**
     * Résultat du SmartService.
     */
    public function setResult(?CegidMtsTechnicalBasesModelsSmartServiceResult $result): self
    {
        $this->initialized['result'] = true;
        $this->result = $result;

        return $this;
    }

    /**
     * L'invocatiion du SmartService a retourné un résultat (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function getHasResult(): ?bool
    {
        return $this->hasResult;
    }

    /**
     * L'invocatiion du SmartService a retourné un résultat (sert à la méthode EndExecute() : ne pas modifier).
     */
    public function setHasResult(?bool $hasResult): self
    {
        $this->initialized['hasResult'] = true;
        $this->hasResult = $hasResult;

        return $this;
    }
}
